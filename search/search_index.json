{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83c\udf84\ud83c\udf84\ud83c\udf84 Advent of code \u00b6 You will find in this website daily coding challenges and proposed solutions. It will also highlight some programming best practices and tricks Note Coding challenges are drawn from the awesome platform Advent Of Code . This website is merely a wrapper of our open source solutions and tricks \u27a1 Go to the challenges tab to get started","title":"\ud83c\udf84\ud83c\udf84\ud83c\udf84 Advent of code"},{"location":"#advent-of-code","text":"You will find in this website daily coding challenges and proposed solutions. It will also highlight some programming best practices and tricks Note Coding challenges are drawn from the awesome platform Advent Of Code . This website is merely a wrapper of our open source solutions and tricks \u27a1 Go to the challenges tab to get started","title":"\ud83c\udf84\ud83c\udf84\ud83c\udf84 Advent of code"},{"location":"tutorials/day2/","text":"(function() { function addWidgetsRenderer() { var mimeElement = document.querySelector('script[type=\"application/vnd.jupyter.widget-view+json\"]'); var scriptElement = document.createElement('script'); var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js'; var widgetState; // Fallback for older version: try { widgetState = mimeElement && JSON.parse(mimeElement.innerHTML); if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) { widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js'; } } catch(e) {} scriptElement.src = widgetRendererSrc; document.body.appendChild(scriptElement); } document.addEventListener('DOMContentLoaded', addWidgetsRenderer); }()); Day 2: Password Philosophy \u00b6 Problem \u00b6 Note Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan. The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look. Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen. To try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set. For example, suppose you have the following list: 1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times. In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies. How many passwords are valid according to their policies? https://adventofcode.com/2020/day/2 Solution 1 \u00b6 Tip \u00b6 You can use the Counter algorithms, it's native to Python, you have nothing to install from collections import Counter Counter ( \"aabebeheucuefh\" ) Counter({'a': 2, 'b': 2, 'e': 4, 'h': 2, 'u': 2, 'c': 1, 'f': 1}) Counter ( \"aabebeheucuefh\" ) . get ( \"a\" , 0 ) 2 Counter ( \"aabebeheucuefh\" ) . get ( \"z\" , 0 ) 0 Writing the solution functions \u00b6 def split_policy_password ( x ): \"\"\"Splits input strings with policy and password provided by the platform Returns policy and password in a tuple \"\"\" policy , password = x . split ( \":\" ) return policy . strip (), password . strip () def is_valid ( x ): policy , password = split_policy_password ( x ) minmax , letter = policy . split ( \" \" ) min_value , max_value = minmax . split ( \"-\" ) min_value , max_value = int ( min_value ), int ( max_value ) count = Counter ( password ) return min_value <= count . get ( letter , 0 ) <= max_value def count_valids ( text_input ): examples = text_input . strip () . split ( \" \\n \" ) valids = [ x for x in examples if is_valid ( x )] return len ( valids ) Solving the example \u00b6 text_input = \"\"\" 1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc \"\"\" examples = text_input . strip () . split ( \" \\n \" ) for x in examples : print ( x , \" - \" , is_valid ( x )) 1-3 a: abcde - True 1-3 b: cdefg - False 2-9 c: ccccccccc - True count_valids ( text_input ) 2 Solving the final solution \u00b6 text_input = open ( \"inputs/day2.txt\" , \"r\" ) . read () print ( text_input [: 500 ]) 3-11 z: zzzzzdzzzzlzz 3-7 x: xjxbgpxxgtx 3-4 v: vvmv 3-5 t: tgkfq 9-10 j: jjjjjjjjqjjjj 5-7 r: rnhrhrr 2-6 n: gnntnnsnnqjsbrn 3-4 g: vrggfvxsgmggkgsm 1-4 c: brccqr 1-5 h: hhhzzvcdhhhhhhhh 4-11 c: ncnqbzlkckc 1-13 q: hqqqqqqqqqqqlq 8-9 h: hhhhhhxxkh 3-9 b: bbbbsfbbc 3-8 k: zfqzkzgk 3-9 k: wjkwhnkkfvxk 3-11 v: vgkvvcjvvvv 5-6 l: llllhr 9-11 z: lzzzgzzmzzdzzz 13-16 w: wwlwwwwlwwxwwfwf 8-11 r: rrrrrrrrrrcrdrr 1-9 v: mlvvvxnwrwvv 4-6 z: mzzzzz 3-4 s: svsj 8-11 w: wwwwwwwjwwww 10-13 r: drrrrzhmxfjdrtf count_valids ( text_input ) 550","title":"Day 2"},{"location":"tutorials/day2/#day-2-password-philosophy","text":"","title":"Day 2: Password Philosophy"},{"location":"tutorials/day2/#problem","text":"Note Your flight departs in a few days from the coastal airport; the easiest way down to the coast from here is via toboggan. The shopkeeper at the North Pole Toboggan Rental Shop is having a bad day. \"Something's wrong with our computers; we can't log in!\" You ask if you can take a look. Their password database seems to be a little corrupted: some of the passwords wouldn't have been allowed by the Official Toboggan Corporate Policy that was in effect when they were chosen. To try to debug the problem, they have created a list (your puzzle input) of passwords (according to the corrupted database) and the corporate policy when that password was set. For example, suppose you have the following list: 1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc Each line gives the password policy and then the password. The password policy indicates the lowest and highest number of times a given letter must appear for the password to be valid. For example, 1-3 a means that the password must contain a at least 1 time and at most 3 times. In the above example, 2 passwords are valid. The middle password, cdefg, is not; it contains no instances of b, but needs at least 1. The first and third passwords are valid: they contain one a or nine c, both within the limits of their respective policies. How many passwords are valid according to their policies? https://adventofcode.com/2020/day/2","title":"Problem"},{"location":"tutorials/day2/#solution-1","text":"","title":"Solution 1"},{"location":"tutorials/day2/#tip","text":"You can use the Counter algorithms, it's native to Python, you have nothing to install from collections import Counter Counter ( \"aabebeheucuefh\" ) Counter({'a': 2, 'b': 2, 'e': 4, 'h': 2, 'u': 2, 'c': 1, 'f': 1}) Counter ( \"aabebeheucuefh\" ) . get ( \"a\" , 0 ) 2 Counter ( \"aabebeheucuefh\" ) . get ( \"z\" , 0 ) 0","title":"Tip"},{"location":"tutorials/day2/#writing-the-solution-functions","text":"def split_policy_password ( x ): \"\"\"Splits input strings with policy and password provided by the platform Returns policy and password in a tuple \"\"\" policy , password = x . split ( \":\" ) return policy . strip (), password . strip () def is_valid ( x ): policy , password = split_policy_password ( x ) minmax , letter = policy . split ( \" \" ) min_value , max_value = minmax . split ( \"-\" ) min_value , max_value = int ( min_value ), int ( max_value ) count = Counter ( password ) return min_value <= count . get ( letter , 0 ) <= max_value def count_valids ( text_input ): examples = text_input . strip () . split ( \" \\n \" ) valids = [ x for x in examples if is_valid ( x )] return len ( valids )","title":"Writing the solution functions"},{"location":"tutorials/day2/#solving-the-example","text":"text_input = \"\"\" 1-3 a: abcde 1-3 b: cdefg 2-9 c: ccccccccc \"\"\" examples = text_input . strip () . split ( \" \\n \" ) for x in examples : print ( x , \" - \" , is_valid ( x )) 1-3 a: abcde - True 1-3 b: cdefg - False 2-9 c: ccccccccc - True count_valids ( text_input ) 2","title":"Solving the example"},{"location":"tutorials/day2/#solving-the-final-solution","text":"text_input = open ( \"inputs/day2.txt\" , \"r\" ) . read () print ( text_input [: 500 ]) 3-11 z: zzzzzdzzzzlzz 3-7 x: xjxbgpxxgtx 3-4 v: vvmv 3-5 t: tgkfq 9-10 j: jjjjjjjjqjjjj 5-7 r: rnhrhrr 2-6 n: gnntnnsnnqjsbrn 3-4 g: vrggfvxsgmggkgsm 1-4 c: brccqr 1-5 h: hhhzzvcdhhhhhhhh 4-11 c: ncnqbzlkckc 1-13 q: hqqqqqqqqqqqlq 8-9 h: hhhhhhxxkh 3-9 b: bbbbsfbbc 3-8 k: zfqzkzgk 3-9 k: wjkwhnkkfvxk 3-11 v: vgkvvcjvvvv 5-6 l: llllhr 9-11 z: lzzzgzzmzzdzzz 13-16 w: wwlwwwwlwwxwwfwf 8-11 r: rrrrrrrrrrcrdrr 1-9 v: mlvvvxnwrwvv 4-6 z: mzzzzz 3-4 s: svsj 8-11 w: wwwwwwwjwwww 10-13 r: drrrrzhmxfjdrtf count_valids ( text_input ) 550","title":"Solving the final solution"},{"location":"tutorials/quickstart/","text":"","title":"Quickstart"}]}